---
title:  "Quick Guide"
permalink: docs/quick_guide.html
toplevel: "Getting Started: Quick Guide"
---

##### Quick Guide

Next, install [Yeoman](http://yeoman.io/) and the Electrode [generator-electrode](https://github.com/electrode-io/generator-electrode"):

```bash    
$ npm install -g yo
$ npm install -g generator-electrode
```
Make a new directory for your awesome app.

Then [generate](https://github.com/electrode-io/generator-electrode) your new project:

```bash
$ yo electrode
```

Fill out the Electrode App generator with your information.

Let's take a quick high level overview of our file structure and what `generator-electrode` gives you out the box. Read through our [Explore](#explore) for a more detailed description.

```
client
  Contains your client side code and our favs, React, Redux + Stylus.
  |_components
    This is the folder for your React components. We love React and how it helps us to manage User Interface complexity. Read more in the Explore section.

  |_styles
    This is the folder for your CSS files, in this case .styl files. We like Stylus, a CSS preprocessor that tackles big scale style issues.

  app.jsx
    The entry point for the client. It contains powerful Electrode modules that we will leverage as we continue to Build More.

  routes.jsx
    The shared routes between client and server are defined here in one place and we use react-router.

config
    Your environment specific configuration code goes here. We have used a versatile module here, our Electrode-Confippet, a preset config that you can customize and extend.

node_modules
  Other Javascript files contained in modules that we will use in this application, including Electrode modules that create your out-the-box Univeresal app.

server
  Contains your server code. Electrode-Server gives you a powerful plugin capable of SSR out the box. Learn more in the Explore section.
  |_plugins
  |_views

.babelrc
  Where we extend our app babel configuration to allow us to use the presets and any additional babel settings.

.editorconfig
.gitattributes
.gitignore
   A file that tell git what files (or patterns) to ignore when you commit.

.ismorphic-loader-config.json
  A webpack loader, plugin and library to make NodeJS 'require' understand complex files like images when we are doing server side rendering.

.travis.yml
  A file where you can customize any process in the Travis default build environment.

gulpfile.js
  A file that stores all your Gulp configurations. We will explore this more in Getting Started: Intermediate.

LICENSE
package.json
  Contains the metadata for your-awesome-app and a list of your dependencies to install from npm when running npm install.

README.md
  Info you want users to know about your app (installation instructions, licensing, contributors, etc.).
```

Run one simple command. Presto!

```bash
$ gulp dev
```

Open [http://localhost:3000] in your browser. Hello Electrode!

##### Explore

What does generate-electrode give you? Let's begin by navigating to `<'your-awesome-app'>/client/components/home.jsx`:

```
client
  |_components
      |_home.jsx
```


[React](https://facebook.github.io/react/index.html) is a JavaScript library for building user interfaces. A simplified way to look at it is that it can be used as the V in an MV* application. It was created by Facebook and is being actively developed.</p>

Building with React lets developers create a modular and reusable component architecture. We can reuse the business logic in existing models and controllers because it only provides the View layer. The components you write are self-contained, which aids developers in reasoning what a component does directly by reading the source. Finally, it is ideally suited to Universal JavaScript (previously called Isomorphic JavaScript), the practice of sharing code between Server and Client.

Next, navigate to `<'your-awesome-app'>/client/styles/base.styl`:

```
client
  |_base.styl
```

We handle styling using [Stylus](http://stylus-lang.com/), which is a CSS preprocessor designed for the node.js world. Styles are defined in .styl files, which can be imported in to other Stylus files, and in to components.</p>

<p>This approach allows us to utilize the power of a CSS preprocessor and gain its benefits (reduced code duplication, variables for easy maintenance, modularization) and also allows us to write small .styl files specific to a component or feature, rather than producing a huge stylesheet file (or files) that become a chore to maintain, especially at the scale of a place like WalmartLabs.</p>

<p>Let's peer inside of our client/app.jsx to get a better understanding of the relationship between the client and the server: <'your-awesome-app'>/client/app.jsx:</p>

```
client
  |_app.jsx
```

Below is the information you need to know about what the app.jsx is doing. We've broken it down, with links on where you can learn even more:

```javascript
import React from "react";
import { routes } from "./routes";
import { Router } from "react-router";
```

Any real world web application needs to be able to handle different routes serving different content, so how do we handle the concept of routing in the Electrode platform? The library chosen to take care of this for us is [react-router](https://github.com/reactjs/react-router/tree/master/docs).

Why [react-router](https://github.com/reactjs/react-router/tree/master/docs)? The project is mature, well documented and integrates well within the Electrode tech stack.

```javascript
import { Resolver } from "react-resolver";
```

[React-Resolver](http://ericclemmons.com/react-resolver/) lets you define data requirements per component and will handle the nested, async rendering on both the server and client for you. This approach matches the Electrode methodology of keeping definitions of what a component needs within the component (), and also allows us to write universal javascript applications in a non-blocking way. This solves our frequent need for pages that are rendered on the server.

```javascript
import { createHistory } from "history";

import "./styles/base.styl";
```

[History](https://github.com/mjackson/history) is a JavaScript library that lets you easily manage session history anywhere JavaScript runs and abstracts away the differences in various environments.

```javascript
window.webappStart = () => {
  Resolver.render(
    () => <Router history={createHistory()}>{routes}</Router>,
    document.querySelector(".js-content")
  );
};
```

If you have a universal application and server side rendering, [react-resolver](http://ericclemmons.com/react-resolver/docs/getting-started/ServerRendering.html) handles bootstrapping server-rendered markup via `Resolver.render` instead of `React.render`.

We will be sharing our routes between server and client so obviously we only want to define them in one place, in your `<'your-awesome-app'>/client/routes.jsx`:


```
client
  |_routes.jsx
```

In your `<'your-awesome-app'>/config`, we are leveraging one of Electrode's most important stand alone modules: [electrode-confippet](confippet.html).

Confippet is a versatile utility for managing your NodeJS application configuration. Its goal is customization and extensibility, but offers a [preset config](https://github.com/electrode-io/electrode-confippet) out of the box.

We use this to keep your environment specific configurations manageable. Once you have your config files setup according to the configuration files setup, you can simply pass the config object to electrode server.

```
config
  |_default.json
  |_development.json
  |_production.json
```

Let's checkout your `<'your-awesome-app'>/server`

```
server
  |_plugins
      |_webapp
          |_index.html
          |_index.js
  |_views
      |_index-view.jsx
  |_index.js
```

You are now using [Electrode-Server](#TODO), a NodeJS module that allows you to start up a Hapi server with a single function call, but gives you a lot of flexibility through configurations. This is the baseline functionality of a Hapi web server that you can extend via configuration.

Before we move on, we should inspect a critical file, `<'your-awesome-app'>/server/plugins/webapp/index.html`. This is where the server side "magic" happens. By magic, of course we mean the benefits of using the `generate-electrode` + server side rendering.

```javascript
<!DOCTYPE html>
<html lang="en">
  <head>
  <meta charset="UTF-8"/>
  <title>{{PAGE_TITLE}}</title>
    {{'WEBAPP_BUNDLES'}}
    {{'PREFETCH_BUNDLES'}}
  </head>
  <body>
    <div class="js-content">{{'SSR_CONTENT'}}</div>
    <script>if (window.webappStart) webappStart();</script>
  </body>
</html>
```

All of your content will be served into an HTML string and placed in this unassuming `<div class="js-content">{{'SSR_CONTENT'}}</div>`. This includes React components and Redux.

To achieve this, the Electrode team has created another powerful module here to optimize performance for your out-the-box Universal app:

[Electrode-Router-Resolver-Engine](https://github.com/electrode-io/redux-router-engine) which takes React routes and requests and returns HTML to be rendered by `electrode-react-webapp`. We have found this to be the best tool for dealing with [redux asynchronous actions](https://github.com/electrode-io/redux-router-engine).

Next, we should discuss the `<'your-awesome-app'>/.babelrc`:

```
.babelrc
```

This is where we extend our electrode-archetype-react-app babel [configuration](https://babeljs.io/docs/usage/babelrc/) to allow us to use the [presets](https://babeljs.io/docs/plugins/preset-es2015/) (ES6, React) and any plugins or projects that need additional Babel settings.

Following, we have the `<'your-awesome-app'>/isomorphic-loader-config.json`:

```
.isomorphic-loader-config.json
```

This [Webpack loader](https://github.com/jchip/isomorphic-loader) and tools to make NodeJS require understands files such as images when you are doing server side rendering. It contains three pieces: a Webpack loader, Webpack plugin and a library for your NodeJS app.

With the generator-electrode, we've created a dynamic and performant full stack Electrode app in under five minutes, using some of our favorites technologies, like [React](https://facebook.github.io/react/index.html) and [Hapi](http://hapijs.com/). Let's explore and personalize this web application in our next section, [Getting Started: Build More](build_more.html).
