---
title:  "Above The Fold Rendering"
permalink: docs/above_fold_rendering.html
toplevel: "Stand Alone Modules"
---

The [above-the-fold-rendering-module](https://github.com/electrode-io/above-the-fold-only-server-render) is a React component for optionally skipping server side rendering of components outside of above-the-fold. This component helps render your components on the server that are above the fold and the rest on client. We will demonstrate how to use this module in Electrode, Express, or Hapi applications.

### Why do we need this module?

[Above-the-fold-only-server-render](https://github.com/electrode-io/above-the-fold-only-server-render) helps increase performance both by decreasing the load on renderToString and sending the end user a smaller amount of markup.

The table below outlines a clear performance increase in the example app by skipping server rendering of the [Walmrt.com](walmart.com) `Footer` component and several other below the fold zones:

Footer Component Performance Table

![above-the-fold-table](/img/above-the-fold-table.png)

{% include module_usage.md moduleId="electrode-above-the-fold-render" express=true hapi=true %}

By default, the [above-the-fold-only-server-render](https://github.com/electrode-io/above-the-fold-only-server-render) component is an exercise in simplicity; it does nothing and only returns the child component.

You can tell the component to skip server side rendering either by passing a prop `skip={true}` or by setting up `skipServerRender` in your app context and passing the component a `contextKey` prop.

You can skip server side rendering by passing a `skip prop`:

```js

const SomeComponent = () => {
  return (
    <SkipServerRender skip={true}>
      <div>This will not be server side rendered.</div>
    </SkipServerRender>
  );
};
```

You can also skip server side rendering by `setting context and passing a contextKey prop`:

```js

const SomeComponent = () => {
    return (
      <SkipServerRender contextKey="skipServerRender.SomeComponent">
        <div>This will not be server side rendered based on the context.</div>
      </SkipServerRender>
    );
};

class SomeApp extends React.Component {
  getChildContext() {
    return {
      skipServerRender: {
        SomeComponent: true
      }
    };
  }

  render() {
    return (
      <SomeComponent />
    );
  }
}

SomeApp.childContextTypes = {
  skipServerRender: React.PropTypes.shape({
    AnotherComponent: React.PropTypes.bool
  })
};

```

## Platforms

This module can be used with either [Electrode](#electrode), [Express](#express), or [Hapi](#hapi).
